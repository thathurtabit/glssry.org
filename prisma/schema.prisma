// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    // https://www.prisma.io/docs/concepts/components/prisma-schema/relations/relation-mode#how-to-set-the-relation-mode-in-your-prisma-schema
    relationMode = "prisma"
}

enum UserRole {
    ADMIN
    EDITOR
    CONTRIBUTOR
}

enum TagName {
    Aeronautics
    Animals
    Art
    Astronomy
    Aviation
    Biology
    Business
    Chemistry
    Civics
    Communications
    Computing
    Construction
    Crafts
    Cryptocurrency
    Cultural
    Economics
    Engineering
    Entertainment
    Environment
    Finance
    Games
    Geography
    Geology
    Hardware
    Health
    History
    Internet
    Journalism
    Languages
    Law
    Linguistics
    Literature
    Mathematics
    Medicine
    Military
    Music
    Mythology
    Networking
    Oceanography
    Performance
    Philosophy
    Physics
    Politics
    Programming
    Psychology
    Religion
    Science
    Security
    Sex
    Slang
    Software
    Space
    Sports
    Teaching
    Technology
    Uncategorized
}

model Post {
    id           String        @id @default(cuid())
    createdAt    DateTime      @default(now())
    title        String        @unique
    slug         String        @unique
    abbreviation String        @db.VarChar(30) @default("")
    acronym      String        @db.VarChar(20) @default("")
    initialism   String        @db.VarChar(10) @default("")
    author       User          @relation(fields: [authorId], references: [id])
    authorId     String
    versions     PostVersion[]

    @@index([authorId])
    @@fulltext([title])
    @@fulltext([abbreviation])
    @@fulltext([acronym])
    @@fulltext([initialism])
    @@fulltext([title, abbreviation, acronym, initialism ])
}

model PostVersion {
    id             String   @id @default(cuid())
    postId         String
    post           Post     @relation(fields: [postId], references: [id])
    updatedAt      DateTime @default(now())
    slug           String
    title          String
    body           String   @db.VarChar(500) // NOTE: check constants.ts
    abbreviation   String   @db.VarChar(30)
    acronym        String   @db.VarChar(20)
    initialism     String   @db.VarChar(10)
    published      Boolean  @default(false)
    link           String   @db.VarChar(2048) // NOTE: check constants.ts
    author         User     @relation(fields: [authorId], references: [id])
    authorId       String
    fileUnder      TagName
    tags           Json     @db.Json
    relatedPostId1 String?  @db.VarChar(100)
    relatedPostId2 String?  @db.VarChar(100)

    @@index([authorId])
    @@index([postId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                      String        @id @default(cuid())
    name                    String?
    username                String?       @unique
    hasPersonalizedUsername Boolean       @default(false)
    email                   String?       @unique
    emailVerified           DateTime?
    image                   String?
    accounts                Account[]
    sessions                Session[]
    posts                   Post[]
    role                    UserRole      @default(CONTRIBUTOR)
    PostVersion             PostVersion[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
